name: Auto Merge Branches

on:
  push:
    branches:
      - 'profit_dep_hf_*'
      - 'profit_dep_minor_*'

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git for authentication (Optional)
        # Remove if unnecessary for your workflow
        run: |
          git config --global url."https://x-access-token:<span class="math-inline">\{\{ secrets\.JEGANTOKEN \}\}@github\.com/"\.insteadOf "https\://github\.com/"
\- name\: Set up Git
run\: \|
git config \-\-global user\.name "GitHub Actions"
git config \-\-global user\.email "actions@github\.com"
COMMITTER\_NAME\=</span>(git log -1 --pretty=format:'%cn')
          COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ce')
          echo "Committer Name: $COMMITTER_NAME"
          echo "Committer Email: $COMMITTER_EMAIL"
          git config user.name "$COMMITTER_NAME"
          git config user.email "$COMMITTER_EMAIL"

      - name: Run auto merge script
        env:
          JEGANTOKEN: ${{ secrets.JEGANTOKEN }}
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          #!/usr/bin/env bash
          set -o pipefail

          REPO_URL="https://github.com/egangithub1502/Jegan-Raja"
          # Consider using a dedicated working directory for clarity
          WORKDIR="/tmp/auto-merge"
          mkdir -p "$WORKDIR"
          cd "<span class="math-inline">WORKDIR" \|\| exit
\# Fetch all branches \(alternative to git fetch \-\-all\)
git fetch origin
\# Pre\-merge conflict check \(optional\)
\# Uncomment if you want pre\-merge check
\# MINOR\_BRANCH\=</span>(fetch_branch 'profit_dep_minor_')
          # if [[ "$GITHUB_REF" == refs/heads/profit_dep_hf_* ]] && [[ ! -z "$MINOR_BRANCH" ]]; then
          #   if ! git diff --quiet "origin/$GITHUB_REF" "origin/$MINOR_BRANCH"; then
          #     echo "Conflict detected during pre-merge check. Skipping merge."
          #     exit 1
          #   fi
          # fi

          # Handle profit_dep_hf to profit_dep_minor and master merge
          if [[ "<span class="math-inline">GITHUB\_REF" \=\= refs/heads/profit\_dep\_hf\_\* \]\]; then
MINOR\_BRANCH\=</span>(fetch_branch 'profit_dep_minor_')
            if [[ -z "$MINOR_BRANCH" ]]; then
              echo "No minor branch found. Exiting."
              exit 1
            fi
            echo "Found minor branch: $MINOR_BRANCH"

            # Clone the repository (alternative to using origin)
            git clone --single-branch --branch "$MINOR_BRANCH" "$REPO_URL" "$MINOR_BRANCH"

            cd "<span class="math-inline">MINOR\_BRANCH" \|\| exit
HF\_BRANCH\="</span>{GITHUB_REF#refs/heads/}"
            echo "Merging $HF_BRANCH into $MINOR_BRANCH"

            if ! git show-ref --quiet "refs/heads/$HF_BRANCH"; then
              git fetch origin "$HF_BRANCH:$HF_BRANCH"
            fi

            git merge --no-ff "$HF_BRANCH"

            if [[ <span class="math-inline">? \-ne 0 \]\]; then
TEMP\_BRANCH\="temp/hf\-to\-minor\-</span>(date +%s)"
              git checkout -b "$TEMP_BRANCH"
              git push origin "$TEMP_BRANCH"
              echo "Conflict detected. Temporary branch created: $TEMP_BRANCH"
              curl -X POST -H "Content-Type: application/json" -d "{\"text\": \"Conflict detected during merge from $HF_BRANCH to $MINOR_BRANCH. Temporary branch created: $TEMP_BRANCH\"}" "$GOOGLE_CHAT_WEBHOOK_URL"
              exit 1
            else
              git push origin "$MINOR_BRANCH"
            fi

            # Merge minor branch changes into master
            cd "$WORKDIR" || exit
            git checkout master
            git pull origin master

            echo "Merging $MINOR_BRANCH into master"
