name: Auto Merge Branches

on:
  push:
    branches:
      - 'profit_dep_hf_*'
      - 'profit_dep_minor_*'

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Git for authentication
      run: |
        git config --global url."https://x-access-token:${{ secrets.JEGANTOKEN }}@github.com/".insteadOf "https://github.com/"
    - name: Set up Git
      run: |
        # Configure Git with a default user
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        # Fetch the latest commit information
        COMMITTER_NAME=$(git log -1 --pretty=format:'%cn')
        COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ce')
        # Display the committer information
        echo "Committer Name: $COMMITTER_NAME"
        echo "Committer Email: $COMMITTER_EMAIL"
        # Configure Git with the committer's information
        git config user.name "$COMMITTER_NAME"
        git config user.email "$COMMITTER_EMAIL"
    - name: Run auto merge script
      env:
        JEGANTOKEN: ${{ secrets.JEGANTOKEN }}
      run: |
        #!/usr/bin/env bash
        set -o pipefail
        # Configuration
        REPO_URL="https://github.com/egangithub1502/Jegan-Raja"
        GH_TOKEN="${JEGANTOKEN}"
        # Functions
        function fetch_branch() {
          local pattern=$1
          git branch -r | grep "origin/$pattern" | tail -n 1 | sed 's|origin/||' | xargs
        }
        # Main Script
        # Step 1: Check out the repo and set up Git
        git clone "$REPO_URL" repo
        cd repo || exit
        # Step 2: Handle profit_dep_hf to profit_dep_minor merge
        if [[ "$GITHUB_REF" == refs/heads/profit_dep_hf_* ]]; then
          MINOR_BRANCH=$(fetch_branch 'profit_dep_minor_')
          if [[ -z "$MINOR_BRANCH" ]]; then
            echo "No minor branch found. Exiting."
            exit 1
          fi
          echo "Found minor branch: $MINOR_BRANCH"
          
          git fetch origin
          git checkout "$MINOR_BRANCH"
          git pull origin "$MINOR_BRANCH"
          
          HF_BRANCH="${GITHUB_REF#refs/heads/}"
          echo "Merging $HF_BRANCH into $MINOR_BRANCH"
          
          # Check if the HF branch exists locally; if not, fetch it
          if ! git show-ref --quiet "refs/heads/$HF_BRANCH"; then
            git fetch origin "$HF_BRANCH:$HF_BRANCH"
          fi
          
          git merge --no-ff "$HF_BRANCH"
          
          if [[ $? -ne 0 ]]; then
            TEMP_BRANCH="temp/hf-to-minor-$(date +%s)"
            git checkout -b "$TEMP_BRANCH"
            git push origin "$TEMP_BRANCH"
            echo "Conflict detected. Temporary branch created: $TEMP_BRANCH"
            exit 1
          else
            git push origin "$MINOR_BRANCH"
          fi
        fi
        # Step 3: Handle profit_dep_minor to master merge
        if [[ "$GITHUB_REF" == refs/heads/profit_dep_minor_* ]] || [[ "$GITHUB_REF" == refs/heads/profit_dep_hf_* ]]; then
          git fetch origin
          git checkout master
          git pull origin master
          
          MINOR_BRANCH=$(fetch_branch 'profit_dep_minor_')
          if [[ -z "$MINOR_BRANCH" ]]; then
            echo "No minor branch found. Exiting."
            exit 1
          fi
          echo "Found minor branch: $MINOR_BRANCH"
          
          # Check if the minor branch exists locally; if not, fetch it
          if ! git show-ref --quiet "refs/heads/$MINOR_BRANCH"; then
            git fetch origin "$MINOR_BRANCH:$MINOR_BRANCH"
          fi
          git merge --no-ff "$MINOR_BRANCH"
          
          if [[ $? -ne 0 ]]; then
            TEMP_BRANCH="temp/minor-to-master-$(date +%s)"
            git checkout -b "$TEMP_BRANCH"
            git push origin "$TEMP_BRANCH"
            echo "Conflict detected. Temporary branch created: $TEMP_BRANCH"
            exit 1
          else
            git push origin master
          fi
        fi
      shell: bash
