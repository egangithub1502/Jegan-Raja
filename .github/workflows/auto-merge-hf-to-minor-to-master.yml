name: Auto Merge Branches

on:
  push:
    branches:
      - 'profit_dep_hf_*'
      - 'profit_dep_minor_*'

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git for authentication
        run: |
          git config --global url."https://x-access-token:${{ secrets.JEGANTOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          COMMITTER_NAME=$(git log -1 --pretty=format:'%cn')
          COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ce')
          echo "Committer Name: $COMMITTER_NAME"
          echo "Committer Email: $COMMITTER_EMAIL"
          git config user.name "$COMMITTER_NAME"
          git config user.email "$COMMITTER_EMAIL"

      - name: Run auto merge script
        env:
          JEGANTOKEN: ${{ secrets.JEGANTOKEN }}
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          #!/usr/bin/env bash
          set -o pipefail

          REPO_URL="https://github.com/egangithub1502/Jegan-Raja"
          GH_TOKEN="${JEGANTOKEN}"

          function fetch_branch() {
            local pattern=$1
            git branch -r | grep "origin/$pattern" | tail -n 1 | sed 's|origin/||' | xargs
          }

          function merge_branches() {
            local source_branch="$1"
            local target_branch="$2"

            git fetch origin
            git checkout "$target_branch"
            git pull origin "$target_branch"

            if ! git show-ref --quiet "refs/heads/$source_branch"; then
              git fetch origin "$source_branch:$source_branch"
            fi

            # Check for conflicts before merging
            git merge --no-ff --no-commit "$source_branch"
            if [[ $? -eq 0 ]]; then
              git commit -m "Merged $source_branch into $target_branch"
              git push origin "$target_branch"
            else
              git reset --hard HEAD
              TEMP_BRANCH="temp/$source_branch-to-$target_branch-$(date +%s)"
              git checkout -b "$TEMP_BRANCH"
              git push origin "$TEMP_BRANCH"
              echo "Conflict detected. Temporary branch created: $TEMP_BRANCH"
              curl -X POST -H "Content-Type: application/json" -d "{\"text\": \"Conflict detected during merge from $source_branch to $target_branch. Temporary branch created: $TEMP_BRANCH\"}" "$GOOGLE_CHAT_WEBHOOK_URL"
            fi
          }

          # Handle profit_dep_hf to profit_dep_minor and master merge
          if [[ "$GITHUB_REF" == refs/heads/profit_dep_hf_* ]]; then
            MINOR_BRANCH=$(fetch_branch 'profit_dep_minor_')
            if [[ -z "$MINOR_BRANCH" ]]; then
              echo "No minor branch found. Exiting."
              exit 1
            fi

            merge_branches "$GITHUB_REF" "$MINOR_BRANCH"
            merge_branches "$MINOR_BRANCH" "master"
          fi

          # Handle profit_dep_minor to master merge
          if [[ "$GITHUB_REF" == refs/heads/profit_dep_minor_* ]]; then
            merge_branches "$GITHUB_REF" "master"
          fi
